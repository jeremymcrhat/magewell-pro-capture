
/*
 * GPL header
 */

#ifndef __video_h
#define __video_h

void video_capture_SetIntEnables(struct mag_cap_dev *mdev,
					unsigned long enable_bits);


enum VIDEO_REG_ADDR {
    VIDEO_REG_ADDR_VER_CAPS					= 4 * 0,

    VIDEO_REG_ADDR_INT_ENABLE					= 4 * 1,
    VIDEO_REG_ADDR_INT_STATUS					= 4 * 2,
    VIDEO_REG_ADDR_INT_RAW_STATUS				= 4 * 3,

    VIDEO_REG_ADDR_RESET						= 4 * 4,

    VIDEO_REG_ADDR_CONTROL_PORT				= 4 * 5,
    VIDEO_REG_ADDR_CONTROL_PORT_SET			= 4 * 6,
    VIDEO_REG_ADDR_CONTROL_PORT_CLEAR			= 4 * 7,

    VIDEO_REG_ADDR_INPUT_CONTROL				= 4 * 8,
    VIDEO_REG_ADDR_INPUT_STATUS				= 4 * 8,

    VIDEO_REG_ADDR_INPUT_CLIP_X_CONTROL		= 4 * 9,
    VIDEO_REG_ADDR_INPUT_CLIP_F0_Y_CONTROL	= 4 * 10,
    VIDEO_REG_ADDR_INPUT_CLIP_F1_Y_CONTROL	= 4 * 11,

    VIDEO_REG_ADDR_INPUT_TIMESTAMP_LOW		= 4 * 12,
    VIDEO_REG_ADDR_INPUT_TIMESTAMP_HIGH		= 4 * 13,
    VIDEO_REG_ADDR_INPUT_FRAME_INFO			= 4 * 14,

    VIDEO_REG_ADDR_VFS_FULL_TIMESTAMP_LOW		= 4 * 15,
    VIDEO_REG_ADDR_VFS_FULL_TIMESTAMP_HIGH	= 4 * 16,
    VIDEO_REG_ADDR_VFS_FULL_FRAME_INFO		= 4 * 17,
    VIDEO_REG_ADDR_VFS_FULL_STRIPE_INFO		= 4 * 18,

    VIDEO_REG_ADDR_VFS_QUARTER_TIMESTAMP_LOW	= 4 * 19,
    VIDEO_REG_ADDR_VFS_QUARTER_TIMESTAMP_HIGH	= 4 * 20,
    VIDEO_REG_ADDR_VFS_QUARTER_FRAME_INFO		= 4 * 21,
    VIDEO_REG_ADDR_VFS_QUARTER_STRIPE_INFO	= 4 * 22,

    VIDEO_REG_ADDR_VFS_FULL_LINE_CONTROL		= 4 * 23,
    VIDEO_REG_ADDR_VFS_FULL_MAX_LINE_ID		= 4 * 24,

    VIDEO_REG_ADDR_VFS_QUARTER_LINE_CONTROL	= 4 * 25,
    VIDEO_REG_ADDR_VFS_QUARTER_MAX_LINE_ID	= 4 * 26,

    VIDEO_REG_ADDR_INPUT_CLIP_P1_F0_Y_CONTROL = 4 * 27,
    VIDEO_REG_ADDR_INPUT_CLIP_P1_F1_Y_CONTROL = 4 * 28,

    VIDEO_REG_ADDR_VPP_BORDER_CONTROL_1		= 4 * 30,
    VIDEO_REG_ADDR_VPP_BORDER_CONTROL_2		= 4 * 31,

    VIDEO_REG_ADDR_VPP_WB_CONTROL				= 4 * 32,
    VIDEO_REG_ADDR_VPP_WB_STATUS				= 4 * 32,

    VIDEO_REG_ADDR_VPP_WB_FBWR_CONTROL		= 4 * 33,
    VIDEO_REG_ADDR_VPP_WB_FBWR_ADDRESS		= 4 * 34,
    VIDEO_REG_ADDR_VPP_WB_FBWR_STRIDE			= 4 * 35,
    VIDEO_REG_ADDR_VPP_WB_FBWR_LINE_CONTROL	= 4 * 36,

    VIDEO_REG_ADDR_VPP1_BASE					= 4 * 40,
    VIDEO_REG_ADDR_VPP2_BASE					= 4 * 80
};

enum VPP_REG_OFFSET {
    VPP_REG_OFFSET_CONTROL				= 4 * 0,
    VPP_REG_OFFSET_STATUS				= 4 * 0,

    VPP_REG_OFFSET_FBRD_CONTROL			= 4 * 1,
    VPP_REG_OFFSET_FBRD_ADDRESS			= 4 * 2,
    VPP_REG_OFFSET_FBRD_STRIDE			= 4 * 3,
    VPP_REG_OFFSET_FBRD_LINE_CONTROL	= 4 * 4,

    VPP_REG_OFFSET_SCALER_X_CONTROL		= 4 * 5,
    VPP_REG_OFFSET_SCALER_Y_CONTROL		= 4 * 6,
    VPP_REG_OFFSET_SCALER_INPUT_SIZE	= 4 * 7,

    VPP_REG_OFFSET_BORDER_SIZE			= 4 * 8,
    VPP_REG_OFFSET_BORDER_X_CONTROL		= 4 * 9,
    VPP_REG_OFFSET_BORDER_Y_CONTROL		= 4 * 10,

    VPP_REG_OFFSET_BLANK_CONTROL_1		= 4 * 11,
    VPP_REG_OFFSET_BLANK_CONTROL_2		= 4 * 12,

    VPP_REG_OFFSET_MATRIX_RV_COEFF_1	= 4 * 13,
    VPP_REG_OFFSET_MATRIX_RV_COEFF_2	= 4 * 14,
    VPP_REG_OFFSET_MATRIX_RV_RANGE		= 4 * 15,
    VPP_REG_OFFSET_MATRIX_GY_COEFF_1	= 4 * 16,
    VPP_REG_OFFSET_MATRIX_GY_COEFF_2	= 4 * 17,
    VPP_REG_OFFSET_MATRIX_GY_RANGE		= 4 * 18,
    VPP_REG_OFFSET_MATRIX_BU_COEFF_1	= 4 * 19,
    VPP_REG_OFFSET_MATRIX_BU_COEFF_2	= 4 * 20,
    VPP_REG_OFFSET_MATRIX_BU_RANGE		= 4 * 21,

    VPP_REG_OFFSET_OSD_CONTROL			= 4 * 22,
    VPP_REG_OFFSET_OSD_ADDRESS			= 4 * 23,
    VPP_REG_OFFSET_OSD0_X_CONTROL		= 4 * 24,
    VPP_REG_OFFSET_OSD0_Y_CONTROL		= 4 * 25,
    VPP_REG_OFFSET_OSD1_X_CONTROL		= 4 * 26,
    VPP_REG_OFFSET_OSD1_Y_CONTROL		= 4 * 27,
    VPP_REG_OFFSET_OSD2_X_CONTROL		= 4 * 28,
    VPP_REG_OFFSET_OSD2_Y_CONTROL		= 4 * 29,
    VPP_REG_OFFSET_OSD3_X_CONTROL		= 4 * 30,
    VPP_REG_OFFSET_OSD3_Y_CONTROL		= 4 * 31
};



#endif

